Question 2:
Explain the difference between overloading and overriding methods with an example?

Ans-:
 Overloading- 1. Method overloading is a Compile-time polymorphism.
2. It occurs within the class.
3. It helps to increse the readability of program.
4. It may or my not require inheritance.
5. Static binding is being used for overloading methods.
6. Private and Final keyword can be over loaded.


Overeiding- 1. Method overriding is run-time polymorphism.
2. It performed in two classes with inheritance.
3. It is used to grant the specific implementation of the method which is already provided.
4. Method overriding always needs inheritance.
5. Dynamic binding is being used for overriding methods.

ex1. Overloding-:

import java.io.*;
 

class MethodOverloadingEx {
 

    static int add(int a, int b) 

    { 

      return a + b; 

    }
 

    static int add(int a, int b, int c)

    {

        return a + b + c;

    }
 

    public static void main(String args[])

    {

          System.out.println("add() with 2 parameters");

        System.out.println(add(4, 6));

       

          System.out.println("add() with 3 parameters");

        System.out.println(add(4, 6, 7));
}
}





ex2.Overriding-:


import java.io.*;
 

class Animal {
 

    void eat()

    {

        System.out.println("eat() method of base class");

        System.out.println("eating.");

    }
}
 

class Dog extends Animal {
 

    void eat()

    {

        System.out.println("eat() method of derived class");

        System.out.println("Dog is eating.");

    }
}
 

class MethodOverridingEx {
 

    public static void main(String args[])

    {

        Dog d1 = new Dog();

        Animal a1 = new Animal();
 

        d1.eat();

        a1.eat();
 

        Animal animal = new Dog();

        // eat() method of animal class is overridden by

        // base class eat()

        animal.eat();
}
}


